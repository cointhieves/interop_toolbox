name: Scan - TruffleHog

on:
  workflow_call:
    inputs:
      continue-action-on-error:
        description: 'Override for Action to fail on error'
        required: false
        type: boolean
        default: true
      safe_directory:
        description: 'Override for Action to fail on error'
        required: false
        type: string
        default: '*'
      trufflehog_flags:
        type: string
        default: '-j'
    secrets:
      TRUFFLEHOG_HTTP_EVENT_TOKEN:
        required: true


jobs:
  trufllehog_repo_secrets_scanner:
    runs-on: ubuntu-latest
    continue-on-error:  '${{ inputs.continue-action-on-error }}'
   
    steps:
      - name: Clone Repositry
        uses: actions/checkout@v4

      - name: Run TruffleHog
        env:
          REPO_PATH: ${{ github.workspace }}
          BASE: '' 
          HEAD: '' 
          ARGS: '${{ inputs.trufflehog_flags }}'
          TRUFFLEHOG_HTTP_EVENT_TOKEN: ${{ secrets.TRUFFLEHOG_HTTP_EVENT_TOKEN }}
          
        run: |
          # Initialize an empty array for all output
          output_lines=()
          # Initialize an empty array specifically for error logs
          error_lines=()
      
          # curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin v3.66.3
      
          # Capture both stdout and stderr
          while IFS= read -r line; do
            # Check if the line contains the specific event structure
            if echo "$line" | grep -q '"SourceMetadata":{'; then
              # Escape double quotes and backslashes in the line
              escaped_line=$(echo "$line" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
              output_lines+=("$escaped_line")
            fi
            # Check for error log lines
            if echo "$line" | grep -q '"level":"error"'; then
              error_line=$(echo "$line" | sed 's/\\/\\\\/g' | sed 's/"/\\"/g')
              error_lines+=("$error_line")
            fi
          done < <(trufflehog git file:///$REPO_PATH \
                        --since-commit ${BASE:-''} \
                        --branch ${HEAD:-''} \
                        --fail \
                        --no-update \
                        --github-actions \
                          ${ARGS:-''} 2>&1)
      
          # Write the output_lines array to the trufflehog_output.json file in valid JSON format
          printf "[" > trufflehog_output.json
          for ((i = 0; i < ${#output_lines[@]}; i++)); do
            printf "  \"%s\"" "${output_lines[$i]}" >> trufflehog_output.json
            if [ $((i + 1)) -ne ${#output_lines[@]} ]; then
              printf ",\n" >> trufflehog_output.json
            else
              printf "\n" >> trufflehog_output.json
            fi
          done
          printf "]" >> trufflehog_output.json
      
          # Write the error_lines array to the trufflehog-error_output.json file in valid JSON format
          if [ ${#error_lines[@]} -ne 0 ]; then
            printf "[" > trufflehog-error_output.json
            for ((i = 0; i < ${#error_lines[@]}; i++)); do
              printf "  \"%s\"" "${error_lines[$i]}" >> trufflehog-error_output.json
              if [ $((i + 1)) -ne ${#error_lines[@]} ]; then
                printf ",\n" >> trufflehog-error_output.json
              else
                printf "\n" >> trufflehog-error_output.json
              fi
            done
            printf "]" >> trufflehog-error_output.json
          else
            echo "[]" > trufflehog-error_output.json
          fi

      - name: Upload TruffleHog Findings log file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog_output.json
          path: trufflehog_output.json
          retention-days: 1

      - name: Upload TruffleHog Error logs file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-error-output-json
          path: trufflehog-error_output.json
          retention-days: 1

      - name: Process TruffleHog findings
        env:
          TRUFFLEHOG_HTTP_EVENT_TOKEN: ${{ secrets.TRUFFLEHOG_HTTP_EVENT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          python -c "
          import json
          import requests
          import os
          import sys
          
          def send_hec_event(hec_url, hec_tok, payload):
              \"\"\"
              Log events to Cribl HTTP Endpoint.
              \"\"\"
              response = requests.post(
                  hec_url, 
                  json=payload, 
                  headers={
                      'Content-Type': 'application/json',
                      'Authorization': f'Splunk {hec_tok}'
                  }, 
                  verify=True
              )
          
          cribl_http_event_token = os.getenv('TRUFFLEHOG_HTTP_EVENT_TOKEN')
          repo_name = os.getenv('GITHUB_REPOSITORY')
          branch_name = os.getenv('GITHUB_REF_NAME')
          run_number = os.getenv('GITHUB_RUN_NUMBER')
          run_id = os.getenv('GITHUB_RUN_ID')
          
          if not cribl_http_event_token:
              print('Cribl Token is not set. Exiting.')
              sys.exit(1)
          
          def log_processor(filename=None): 
              try:
                  with open(filename, 'r') as file:
                      data = json.load(file)
                      
                      if not data:
                          print(f'No events found in {filename}.')
                          no_findings_event = {
                              'message': 'No findings',
                              'repository': repo_name,
                              'branch': branch_name,
                              'run_number': run_number,
                              'run_id': run_id
                          }
                          return False
          
                      findings = []
                      max_file_path_length = 0
                      max_detector_name_length = 0
                      for stringified_event in data:
                          event = json.loads(stringified_event)
          
                          ## Extract finding information
                          file_path = event.get('SourceMetadata', {}).get('Data', {}).get('Git', {}).get('file')
                          detector_name = event.get('DetectorName')
                          verified = str(event.get('Verified'))
                          if file_path:
                              findings.append((file_path, detector_name, verified))
                              max_file_path_length = max(max_file_path_length, len(file_path))
                              max_detector_name_length = max(max_detector_name_length, len(detector_name))
          
                          event['repository'] = repo_name
                          event['branch'] = branch_name
                          event['run_number'] = run_number
                          event['run_id'] = run_id
          
                      if filename == 'trufflehog_output.json' and findings:
                          print('TruffleHog has detected the below files with committed secret(s):')
                          header_format = '| {0:<{col1_width}} | {1:<{col2_width}} | {2:<9} |'
                          total_width = max_file_path_length + max_detector_name_length + 32
                          separator = '-' * total_width
                          print(separator)
                          print(header_format.format('File Path', 'Detector Name', 'Verified', col1_width=max_file_path_length, col2_width=max_detector_name_length))
                          print('|' + '-' * (total_width - 2) + '|')
                          for f in findings:
                              print(header_format.format(f[0], f[1], f[2], col1_width=max_file_path_length, col2_width=max_detector_name_length))
                          print(separator)
                          findings_found = True
          
              except FileNotFoundError:
                  print(f'File {filename} not found. Exiting.')
                  return False
          
              return findings_found
          
          def main():
              findings_in_file = log_processor(filename='trufflehog_output.json')
              log_processor(filename='trufflehog-error_output.json')
          
              if findings_in_file:
                  sys.exit(1)
          
          if __name__ == '__main__':
              main()
          "
