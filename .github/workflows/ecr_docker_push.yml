name: Deploy AWS ECR Container Images

on:
  workflow_call:
    inputs:
      image_name:
        type: string
        default: ${{ github.event.repository.name }}
      tag:
        type: string
        default: ${{ github.run_number }}
      ecr_repository: 
        type: string
        required: true
      aws_region: 
        type: string
        default: us-east-1
    secrets:
      AWS_ACCESS_ID:
        required: true
      AWS_ACCESS_SECRET:
        required: true


jobs:
  docker_builder:
    runs-on: ubuntu-latest
    
    env:
      image_name: ${{inputs.image_name}}:${{inputs.tag}}
    
    steps:
    - name: Clone Repositry
      uses: actions/checkout@v3
      
    - name: Download Docker Image 
      uses: actions/download-artifact@v3
      with:
        name: image_pkg

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1 # More information on this action can be found below in the 'AWS Credentials' section
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
        aws-region: ${{inputs.aws_region}}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{inputs.tag}}
      run: |
        aws ecr create-repository --repository-name $image_name \
          --image-scanning-configuration scanOnPush=true \
          --encryption-configuration encryptionType=AES256 || true
        docker load -i  image_pkg.tar 
        IMAGEID=`docker images $image_name --format "{{.ID}}"`
        docker tag $IMAGEID $REGISTRY/$image_name:$IMAGE_TAG
        docker push $REGISTRY/$image_name:$IMAGE_TAG
